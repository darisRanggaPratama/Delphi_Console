unit ExIm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ZAbstractConnection,
  ZConnection, Data.DB, ZAbstractRODataset, ZAbstractDataset, ZDataset;

type
  TformExIm = class(TForm)
    gBoxExport: TGroupBox;
    lblPeriod: TLabel;
    lblIDPinjam: TLabel;
    txtPeriod: TEdit;
    txtIDPinjam: TEdit;
    btnExportAll: TButton;
    btnExportPerPeriod: TButton;
    btnExportPerID: TButton;
    btnImport: TButton;
    zConnect: TZConnection;
    qAngsur: TZQuery;

    procedure btnExportAllClick(Sender: TObject);
    procedure btnImportClick(Sender: TObject);
    procedure btnExportPerPeriodClick(Sender: TObject);
    procedure btnExportPerIDClick(Sender: TObject);
  private
    { Private declarations }
    procedure connectToDB();
  public
    { Public declarations }
  end;

var
  formExIm: TformExIm;

implementation

uses
  MainForm, DataModuleDB, System.IOUtils;

{$R *.dfm}

procedure TformExIm.connectToDB();
begin
  // Koneksi ke database
  zConnect.Database := ExtractFilePath(Application.ExeName) +
    '\database\pinjam.s3db';
  zConnect.Protocol := 'sqlite';
  zConnect.LibraryLocation := ExtractFilePath(Application.ExeName) +
    '\library\sqlite3.dll';
end;

procedure TformExIm.btnExportAllClick(Sender: TObject);
var
  csvFile: TextFile;
  line: string;
  i: Integer;
begin
  connectToDB();

  try
    zConnect.Connect;

    // Buka file CSV untuk penulisan
    AssignFile(csvFile, TPath.Combine('upload',
      ExtractFilePath(Application.ExeName) + '\export\angsur_exportall.csv'));
    Rewrite(csvFile);

    // Tulis header
    Writeln(csvFile, 'id_pinjam;nik;nama;periode;angsuran;utang;bayar;saldo');

    // Query untuk mengambil data
    qAngsur.Close;
    qAngsur.SQL.Text :=
      'SELECT id_pinjam, nik, nama, periode, angsuran, utang, bayar, saldo FROM angsur';
    qAngsur.Open;

    // Tulis data ke CSV
    while not qAngsur.Eof do
    begin
      line := '';
      for i := 0 to qAngsur.FieldCount - 1 do
      begin
        if i > 0 then
          line := line + ';';

        // Konversi nilai ke string, tangani kasus khusus untuk field numerik
        case qAngsur.Fields[i].DataType of
          ftInteger, ftLargeint:
            line := line + IntToStr(qAngsur.Fields[i].AsInteger);
          ftFloat, ftCurrency:
            line := line + FloatToStr(qAngsur.Fields[i].AsFloat);
        else
          line := line + qAngsur.Fields[i].AsString;
        end;
      end;
      Writeln(csvFile, line);
      qAngsur.Next;
    end;

    ShowMessage('Ekspor data berhasil! File: angsur_export.csv');
    Self.Close;
    formHome.pageHome.ActivePage := formHome.tabData;
  finally
    CloseFile(csvFile);
    zConnect.Disconnect;
  end;
end;

procedure TformExIm.btnExportPerIDClick(Sender: TObject);
var
  csvFile: TextFile;
  line: string;
  i: Integer;
begin
  connectToDB();

  try
    zConnect.Connect;

    // Buka file CSV untuk penulisan
    AssignFile(csvFile, TPath.Combine('upload',
      ExtractFilePath(Application.ExeName) + '\export\angsur_exportall.csv'));
    Rewrite(csvFile);

    // Tulis header
    Writeln(csvFile, 'id_pinjam;nik;nama;periode;angsuran;utang;bayar;saldo');

    // Query untuk mengambil data
    qAngsur.Close;
    qAngsur.SQL.Text :=
      'SELECT id_pinjam, nik, nama, periode, angsuran, utang, bayar, saldo FROM angsur WHERE id_pinjam LIKE '
      + QuotedStr('%' + txtIDPinjam.Text + '%') + ' ORDER BY periode ASC';
    qAngsur.Open;

    // Tulis data ke CSV
    while not qAngsur.Eof do
    begin
      line := '';
      for i := 0 to qAngsur.FieldCount - 1 do
      begin
        if i > 0 then
          line := line + ';';

        // Konversi nilai ke string, tangani kasus khusus untuk field numerik
        case qAngsur.Fields[i].DataType of
          ftInteger, ftLargeint:
            line := line + IntToStr(qAngsur.Fields[i].AsInteger);
          ftFloat, ftCurrency:
            line := line + FloatToStr(qAngsur.Fields[i].AsFloat);
        else
          line := line + qAngsur.Fields[i].AsString;
        end;
      end;
      Writeln(csvFile, line);
      qAngsur.Next;
    end;

    ShowMessage('Ekspor data berhasil! File: angsur_export.csv');
    Self.Close;
    formHome.pageHome.ActivePage := formHome.tabData;
  finally
    CloseFile(csvFile);
    zConnect.Disconnect;
  end;
end;

procedure TformExIm.btnExportPerPeriodClick(Sender: TObject);
var
  csvFile: TextFile;
  line: string;
  i: Integer;
begin
  connectToDB();

  try
    zConnect.Connect;

    // Buka file CSV untuk penulisan
    AssignFile(csvFile, TPath.Combine('upload',
      ExtractFilePath(Application.ExeName) + '\export\angsur_exportall.csv'));
    Rewrite(csvFile);

    // Tulis header
    Writeln(csvFile, 'id_pinjam;nik;nama;periode;angsuran;utang;bayar;saldo');

    // Query untuk mengambil data
    qAngsur.Close;
    qAngsur.SQL.Text :=
      'SELECT id_pinjam, nik, nama, periode, angsuran, utang, bayar, saldo FROM angsur WHERE periode LIKE '
      + QuotedStr('%' + txtPeriod.Text + '%') + ' ORDER BY periode ASC';
    qAngsur.Open;

    // Tulis data ke CSV
    while not qAngsur.Eof do
    begin
      line := '';
      for i := 0 to qAngsur.FieldCount - 1 do
      begin
        if i > 0 then
          line := line + ';';

        // Konversi nilai ke string, tangani kasus khusus untuk field numerik
        case qAngsur.Fields[i].DataType of
          ftInteger, ftLargeint:
            line := line + IntToStr(qAngsur.Fields[i].AsInteger);
          ftFloat, ftCurrency:
            line := line + FloatToStr(qAngsur.Fields[i].AsFloat);
        else
          line := line + qAngsur.Fields[i].AsString;
        end;
      end;
      Writeln(csvFile, line);
      qAngsur.Next;
    end;

    ShowMessage('Ekspor data berhasil! File: angsur_export.csv');
    Self.Close;
    formHome.pageHome.ActivePage := formHome.tabData;
  finally
    CloseFile(csvFile);
    zConnect.Disconnect;
  end;
end;

procedure TformExIm.btnImportClick(Sender: TObject);
var
  csvFile: TextFile;
  line, sqlInsert: string;
  Fields: TArray<string>;
  isFirstlIne: Boolean;
begin
  connectToDB();

  try
    zConnect.Connect;

    // Buka file CSV
    AssignFile(csvFile, TPath.Combine('upload',
      ExtractFilePath(Application.ExeName) + '\import\angsur.csv'));
    Reset(csvFile);

    isFirstlIne := True;

    // Baca setiap baris CSV
    while not Eof(csvFile) do
    begin
      ReadLn(csvFile, line);

      if isFirstlIne then
      begin
        isFirstlIne := False;
        Continue;
      end;

      Fields := line.Split([';']);

      if Length(Fields) = 8 then // Pastikan jumlah kolom sesuai
      begin
        // Buat query INSERT
        sqlInsert :=
          'INSERT INTO angsur (id_pinjam, nik, nama, periode, angsuran, utang, bayar, saldo) VALUES (:id_pinjam, :nik, :nama, :periode, :angsuran, :utang, :bayar, :saldo)';

        qAngsur.Close;
        qAngsur.SQL.Text := sqlInsert;
        qAngsur.ParamByName('id_pinjam').AsString := Fields[0];
        qAngsur.ParamByName('nik').AsString := Fields[1];
        qAngsur.ParamByName('nama').AsString := Fields[2];
        qAngsur.ParamByName('periode').AsString := Fields[3];
        qAngsur.ParamByName('angsuran').AsInteger := StrToInt(Fields[4]);
        qAngsur.ParamByName('utang').AsInteger := StrToInt(Fields[5]);
        qAngsur.ParamByName('bayar').AsInteger := StrToInt(Fields[6]);
        qAngsur.ParamByName('saldo').AsInteger := StrToInt(Fields[7]);
        qAngsur.ExecSQL;
      end;
    end;
    myDataModule.sourceAngsur.DataSet.Refresh;
    ShowMessage('Import data berhasil!');
    Self.Close;
    formHome.pageHome.ActivePage := formHome.tabData;
  finally
    CloseFile(csvFile);
    zConnect.Disconnect;
  end;
end;

end.
